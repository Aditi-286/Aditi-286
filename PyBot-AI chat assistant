#!/usr/bin/env python3
"""
chatbot_server.py
Pure-Python single-file web chatbot for Python 3.13.7 (no external dependencies).

Run:
    python3 chatbot_server.py
Open in browser:
    http://localhost:8000
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import json
from urllib.parse import parse_qs
import html
import threading
import difflib
import ast
import operator
import re

HOST = "localhost"
PORT = 8000

# ----- Simple knowledge base (you can expand this) -----
KB = {
    "what is your name": "I'm PyBot — a simple Python chatbot you can run locally.",
    "who made you": "You did! Or rather: this example was written in Python.",
    "how are you": "I'm a program — always ready to answer your questions!",
    "what can you do": "I can answer simple questions, do safe arithmetic, and demonstrate a chat interface.",
    "how to learn python": "Start with small projects, practice every day, and read docs + small tutorials.",
    "what is python": "Python is a high-level programming language great for scripting, web, and data work.",
    "hello": "Hello! How can I help?",
    "hi": "Hi there! Ask me anything."
}

# ----- Safe arithmetic evaluator -----
# Only allows basic arithmetic expressions (numbers, + - * / ** % (), unary +/-, and math names if desired)
ALLOWED_NODES = {
    ast.Expression, ast.BinOp, ast.UnaryOp, ast.Constant, ast.Pow,
    ast.Add, ast.Sub, ast.Mult, ast.Div, ast.Mod, ast.USub, ast.UAdd,
    ast.Load, ast.FloorDiv, ast.LShift, ast.RShift, ast.BitOr, ast.BitAnd
}

def safe_eval(expr: str):
    """
    Safely evaluate a simple arithmetic expression.
    Raises ValueError on invalid/unsafe expressions.
    """
    expr = expr.strip()
    # disallow suspicious text
    if re.search(r'[A-Za-z]', expr):
        raise ValueError("Alphanumeric expressions are not allowed in math evaluation.")
    parsed = ast.parse(expr, mode="eval")
    for node in ast.walk(parsed):
        if type(node) not in ALLOWED_NODES:
            raise ValueError(f"Disallowed expression: {type(node).__name__}")
    # Use eval on compiled AST in restricted globals/locals
    code = compile(parsed, "<safe>", "eval")
    return eval(code, {"__builtins__": {}}, {})

# ----- Bot logic -----
def bot_response(message: str) -> str:
    if not message or not message.strip():
        return "Please say something — ask a question or say 'hello'."

    msg = message.strip()
    lower = msg.lower()

    # Simple greeting response
    if re.search(r'\b(hi|hello|hey|hii|hey there)\b', lower):
        return "Hello! I'm PyBot — how can I help you today?"

    # If user asks something that looks like a math expression, try safe eval
    # We'll detect if the message contains only digits, spaces and math operators
    if re.fullmatch(r'[\d\s\.\+\-\*\/\%\(\)\^]+', lower.replace("**", "^")):
        # convert caret ^ to ** if used
        expr = lower.replace("^", "**")
        try:
            val = safe_eval(expr)
            return f"The result is: {val}"
        except Exception as e:
            return f"Sorry, I couldn't evaluate that expression ({e})."

    # If message contains math words like "calculate", "what is 2+2", remove words and try
    math_match = re.search(r'([-+*/%\d\.\s\^\(\)]+)$', msg)
    if math_match:
        expr = math_match.group(1).strip().replace("^", "**")
        try:
            val = safe_eval(expr)
            return f"The answer is: {val}"
        except Exception:
            pass  # fall through to KB

    # Try exact KB match
    key = re.sub(r'[^\w\s]', '', lower)  # strip punctuation
    if key in KB:
        return KB[key]

    # Fuzzy match to KB keys
    keys = list(KB.keys())
    close = difflib.get_close_matches(key, keys, n=1, cutoff=0.6)
    if close:
        return KB[close[0]] + " (I matched that to a similar question.)"

    # If user asks about time/date (very small feature)
    if re.search(r'\btime\b', lower):
        import datetime
        return "Current server time: " + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # If user asks about "tell me a joke"
    if re.search(r'\bjoke\b', lower):
        return "Why did the programmer quit his job? Because he didn't get arrays (a raise)."

    # Default fallback
    return ("I don't know the precise answer to that yet. You can try:\n"
            "- Asking simple factual questions (e.g., 'what is python')\n"
            "- Doing math like '2+2' or 'calculate 12/4'\n"
            "Or expand my knowledge base in the server code.")

# ----- HTTP request handler -----
class ChatHandler(BaseHTTPRequestHandler):
    def _set_headers(self, status=200, content_type="text/html; charset=utf-8"):
        self.send_response(status)
        self.send_header("Content-type", content_type)
        self.end_headers()

    def do_GET(self):
        if self.path.startswith("/"):
            self._set_headers()
            self.wfile.write(self.index_page().encode("utf-8"))
        else:
            self.send_error(404, "Not found")

    def do_POST(self):
        # We expect POST to /chat with JSON body: {"message": "..."}
        if self.path == "/chat":
            content_length = int(self.headers.get("Content-Length", 0))
            body = self.rfile.read(content_length).decode("utf-8")
            # try parse json first, fallback to form-encoded
            try:
                data = json.loads(body)
                user_msg = data.get("message", "")
            except Exception:
                post = parse_qs(body)
                user_msg = post.get("message", [""])[0]

            # sanitize input to avoid accidental HTML injection in logs (we do escape on output)
            user_msg = user_msg.strip()
            reply = bot_response(user_msg)

            response = {"reply": reply}
            resp_text = json.dumps(response, ensure_ascii=False)
            self._set_headers(content_type="application/json; charset=utf-8")
            self.wfile.write(resp_text.encode("utf-8"))
        else:
            self.send_error(404, "Not found")

        def index_page(self) -> str:
        # Stylish Chatbot UI
        return f"""<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>🤖 PyBot — AI Chat Assistant</title>
<style>
  body {{
    margin: 0; padding: 0;
    font-family: "Segoe UI", Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: #222;
    display: flex; align-items: center; justify-content: center;
    height: 100vh;
  }}
  .chat-container {{
    width: 90%; max-width: 700px;
    background: #fff;
    border-radius: 20px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.2);
    display: flex; flex-direction: column;
    overflow: hidden;
  }}
  .header {{
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    color: white;
    text-align: center;
    padding: 20px;
    font-size: 1.5rem;
    font-weight: bold;
    letter-spacing: 1px;
  }}
  .messages {{
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    background: #f9f9fb;
  }}
  .msg {{
    margin: 10px 0;
    display: flex;
  }}
  .msg.user {{ justify-content: flex-end; }}
  .bubble {{
    padding: 12px 16px;
    border-radius: 16px;
    max-width: 70%;
    font-size: 0.95rem;
    line-height: 1.4;
    animation: fadeIn 0.3s ease-in-out;
  }}
  .bubble.user {{
    background: #2575fc;
    color: white;
    border-bottom-right-radius: 4px;
  }}
  .bubble.bot {{
    background: #eceff1;
    color: #333;
    border-bottom-left-radius: 4px;
  }}
  form {{
    display: flex;
    border-top: 1px solid #eee;
    padding: 15px;
    background: #fafafa;
  }}
  input[type="text"] {{
    flex: 1;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 10px;
    font-size: 1rem;
    outline: none;
  }}
  button {{
    margin-left: 10px;
    padding: 12px 20px;
    background: #2575fc;
    border: none;
    border-radius: 10px;
    color: white;
    font-size: 1rem;
    cursor: pointer;
    transition: 0.2s;
  }}
  button:hover {{
    background: #1254d6;
  }}
  @keyframes fadeIn {{
    from {{ opacity: 0; transform: translateY(10px); }}
    to {{ opacity: 1; transform: translateY(0); }}
  }}
</style>
</head>
<body>
  <div class="chat-container">
    <div class="header">🤖 PyBot — Your Chat Assistant</div>
    <div id="messages" class="messages"></div>
    <form id="chatForm">
      <input id="msgInput" type="text" placeholder="Type your message..." autocomplete="off" />
      <button type="submit">Send</button>
    </form>
  </div>

<script>
const form = document.getElementById('chatForm');
const input = document.getElementById('msgInput');
const messages = document.getElementById('messages');

function addMessage(text, who) {{
  const wrapper = document.createElement('div');
  wrapper.className = 'msg ' + who;
  const bubble = document.createElement('div');
  bubble.className = 'bubble ' + who;
  bubble.textContent = text;
  wrapper.appendChild(bubble);
  messages.appendChild(wrapper);
  messages.scrollTop = messages.scrollHeight;
}}

async function sendMessage(msg) {{
  if (!msg.trim()) return;
  addMessage(msg, 'user');
  input.value = '';
  try {{
    const res = await fetch('/chat', {{
      method: 'POST',
      headers: {{ 'Content-Type': 'application/json' }},
      body: JSON.stringify({{ message: msg }})
    }});
    const data = await res.json();
    addMessage(data.reply, 'bot');
  }} catch (err) {{
    addMessage('⚠️ Error connecting to server.', 'bot');
  }}
}}

form.addEventListener('submit', e => {{
  e.preventDefault();
  sendMessage(input.value);
}});

addMessage("👋 Hi! I'm PyBot. Ask me anything like 'What is Python?' or '2+2'.", 'bot');
</script>
</body>
</html>
"""


# ----- Run server -----
def run_server():
    server = HTTPServer((HOST, PORT), ChatHandler)
    print(f"Serving on http://{HOST}:{PORT}  (Press Ctrl-C to stop)")
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nServer stopped.")
        server.server_close()

if __name__ == "__main__":
    run_server()
